// Buyer Lead Intake System - Prisma Schema
// SQLite database with comprehensive buyer management

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Users table for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  buyers        Buyer[]
  buyerHistory  BuyerHistory[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// Buyers (leads) table
model Buyer {
  id           String      @id @default(cuid())
  fullName     String      @map("full_name")
  email        String?
  phone        String
  city         City
  propertyType PropertyType @map("property_type")
  bhk          BHK?
  purpose      Purpose
  budgetMin    Int?        @map("budget_min")
  budgetMax    Int?        @map("budget_max")
  timeline     Timeline
  source       Source
  status       Status      @default(NEW)
  notes        String?
  tags         String      @default("")
  ownerId      String      @map("owner_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relations
  owner   User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  history BuyerHistory[]

  @@map("buyers")
}

// Buyer history table for tracking changes
model BuyerHistory {
  id        String   @id @default(cuid())
  buyerId   String   @map("buyer_id")
  field     String
  oldValue  String?  @map("old_value")
  newValue  String?  @map("new_value")
  changedBy String   @map("changed_by")
  changedAt DateTime @default(now()) @map("changed_at")

  // Relations
  user        User  @relation(fields: [changedBy], references: [id], onDelete: Cascade)
  buyerRecord Buyer @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  @@map("buyer_history")
}

// NextAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum City {
  MUMBAI     @map("Mumbai")
  DELHI      @map("Delhi")
  BANGALORE  @map("Bangalore")
  CHENNAI    @map("Chennai")
  HYDERABAD  @map("Hyderabad")
  PUNE       @map("Pune")
  KOLKATA    @map("Kolkata")
  AHMEDABAD  @map("Ahmedabad")
  CHANDIGARH @map("Chandigarh")
  MOHALI     @map("Mohali")
  ZIRAKPUR   @map("Zirakpur")
  PANCHKULA  @map("Panchkula")
  OTHER      @map("Other")
}

enum PropertyType {
  APARTMENT @map("Apartment")
  VILLA     @map("Villa")
  PLOT      @map("Plot")
  OFFICE    @map("Office")
  RETAIL    @map("Retail")
}

enum BHK {
  ONE    @map("1")
  TWO    @map("2")
  THREE  @map("3")
  FOUR   @map("4")
  FIVE   @map("5")
  SIX    @map("6")
  SEVEN  @map("7")
  EIGHT  @map("8")
  NINE   @map("9")
  TEN    @map("10")
}

enum Purpose {
  BUY  @map("Buy")
  RENT @map("Rent")
}

enum Timeline {
  WITHIN_3_MONTHS @map("Within 3 months")
  WITHIN_6_MONTHS @map("Within 6 months")
  AFTER_6_MONTHS  @map("After 6 months")
  EXPLORING       @map("Exploring")
}

enum Source {
  WEBSITE  @map("Website")
  REFERRAL @map("Referral")
  WALK_IN  @map("Walk-in")
  CALL     @map("Call")
  OTHER    @map("Other")
}

enum Status {
  NEW            @map("New")
  CONTACTED      @map("Contacted")
  QUALIFIED      @map("Qualified")
  PROPOSAL_SENT  @map("Proposal Sent")
  NEGOTIATION    @map("Negotiation")
  CLOSED_WON     @map("Closed Won")
  CLOSED_LOST    @map("Closed Lost")
}
